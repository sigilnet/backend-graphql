-- create types
CREATE TYPE TOKEN_METADATA
  AS STRUCT<
    "title" STRING,
    "description" STRING,
    "media" STRING,
    "media_hash" STRING,
    "copies" INT,
    "issued_at" BIGINT,
    "expires_at" BIGINT,
    "starts_at" BIGINT,
    "updated_at" BIGINT,
    "extra" STRING,
    "reference" STRING,
    "reference_hash" STRING
  >;

CREATE TYPE TOKEN
  AS STRUCT<
    "token_id" STRING,
    "owner_id" STRING,
    "metadata" TOKEN_METADATA
  >;

CREATE TYPE NFT_MINT
  AS STRUCT<
    "owner_id" STRING,
    "token_ids" ARRAY<STRING>,
    "metadata" ARRAY<TOKEN_METADATA>,
    "memo" STRING
  >;

CREATE TYPE NFT_TRANSFER
  AS STRUCT<
    "new_owner_id" STRING,
    "old_owner_id" STRING,
    "token_ids" ARRAY<STRING>,
    "metadata" ARRAY<TOKEN_METADATA>,
    "memo" STRING
  >;

-- create events
CREATE STREAM "event_nft_mint" (
    "standard" STRING,
    "version" STRING,
    "event" STRING,
    "emit_info" EMIT_INFO,
    "data" ARRAY <NFT_MINT>
)
WITH (
    kafka_topic = 'near-events.nep171.nft_mint',
    value_format = 'json',
    partitions = 1
);

CREATE STREAM "event_nft_mint_flat"
  WITH (kafka_topic='near-events.nep171.nft_mint_flat', partitions=1, value_format='avro')
  AS SELECT
    EXPLODE("data") AS "data"
  FROM
    "event_nft_mint";

CREATE STREAM "event_nft_transfer" (
    "standard" STRING,
    "version" STRING,
    "event" STRING,
    "emit_info" EMIT_INFO,
    "data" ARRAY <NFT_TRANSFER>
)
WITH (
    kafka_topic = 'near-events.nep171.nft_transfer',
    value_format = 'json',
    partitions = 1
);

CREATE STREAM "event_nft_transfer_flat"
  WITH (kafka_topic='near-events.nep171.nft_transfer_flat', partitions=1, value_format='avro')
  AS SELECT
    EXPLODE("data") AS "data"
  FROM
    "event_nft_transfer";

-- create nfts

CREATE STREAM "nft_mint"
  WITH (kafka_topic='sigilnet.nft_mint', partitions=1, value_format='avro')
  AS SELECT
    "data"->"owner_id" AS "owner_id",
    EXPLODE("data"->"token_ids") AS "token_id",
    EXPLODE("data"->"metadata") AS "metadata"
  FROM
    "event_nft_mint_flat";

CREATE STREAM "nft_transfer"
  WITH (kafka_topic='sigilnet.nft_transfer', partitions=1, value_format='avro')
  AS SELECT
    "data"->"new_owner_id" AS "owner_id",
    EXPLODE("data"->"token_ids") AS "token_id",
    EXPLODE("data"->"metadata") AS "metadata"
  FROM
    "event_nft_transfer_flat";

CREATE STREAM "nfts" ("owner_id" STRING, "token_id" STRING, "metadata" TOKEN_METADATA)
  WITH (kafka_topic='sigilnet.nfts', partitions=1, value_format='avro');

INSERT INTO "nfts" SELECT * FROM "nft_mint";
INSERT INTO "nfts" SELECT * FROM "nft_transfer";

-- create sink
CREATE SINK CONNECTOR "nfts" WITH (
    'connector.class'                         = 'com.mongodb.kafka.connect.MongoSinkConnector',
    'connection.uri'                          = 'mongodb://sigilnet:sigilnet@mongo:27017',
    'database'                                = 'sigilnet',
    'collection'                              = 'nfts',
    'tasks.max'                               = '1',
    'topics'                                  = 'sigilnet.nfts',
    'key.converter'                           = 'org.apache.kafka.connect.storage.StringConverter',
    'key.converter.schema.registry.url'       = 'http://schema-registry:8081',
    'value.converter'                         = 'io.confluent.connect.avro.AvroConverter',
    'value.converter.schema.registry.url'     = 'http://schema-registry:8081',
    'document.id.strategy' = 'com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy',
    'document.id.strategy.partial.value.projection.type' = 'AllowList',
    'document.id.strategy.partial.value.projection.list' = 'token_id'
);
