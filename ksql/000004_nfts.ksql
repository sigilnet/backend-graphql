-- create types
CREATE TYPE TOKEN_METADATA
  AS STRUCT<
    "title" STRING,
    "description" STRING,
    "media" STRING,
    "media_hash" STRING,
    "copies" INT,
    "issued_at" STRING,
    "expires_at" STRING,
    "starts_at" STRING,
    "updated_at" STRING,
    "extra" STRING,
    "reference" STRING,
    "reference_hash" STRING,
    "collection_id" STRING
  >;

CREATE TYPE NFT_MINT_WITH_METADATA
  AS STRUCT<
    "owner_id" STRING,
    "token_ids" ARRAY<STRING>,
    "memo" STRING,
    "metadatas" ARRAY<TOKEN_METADATA>,
    "metadata_extras" ARRAY<MAP<STRING, STRING>>,
    "_ids" ARRAY<STRING>
  >;

CREATE TYPE NFT_TRANSFER_WITH_METADATA
  AS STRUCT<
    "new_owner_id" STRING,
    "old_owner_id" STRING,
    "token_ids" ARRAY<STRING>,
    "memo" STRING,
    "metadatas" ARRAY<TOKEN_METADATA>,
    "metadata_extras" ARRAY<MAP<STRING, STRING>>,
    "_ids" ARRAY<STRING>
  >;

-- create events
CREATE STREAM "event_nft_mint_metadata" (
    "standard" STRING,
    "version" STRING,
    "event" STRING,
    "emit_info" EMIT_INFO,
    "data" NFT_MINT_WITH_METADATA,
    "partition_key" STRING KEY
)
WITH (
    kafka_topic = '${topic_input_prefix}.nep171.nft_mint_metadata',
    value_format = 'json',
    partitions = ${topic_input_partitions}
);

CREATE STREAM "event_nft_transfer_metadata" (
    "standard" STRING,
    "version" STRING,
    "event" STRING,
    "emit_info" EMIT_INFO,
    "data" NFT_TRANSFER_WITH_METADATA,
    "partition_key" STRING KEY
)
WITH (
    kafka_topic = '${topic_input_prefix}.nep171.nft_transfer_metadata',
    value_format = 'json',
    partitions = ${topic_input_partitions}
);

-- create nfts
CREATE STREAM "nft_mint_flat"
  WITH (kafka_topic='${topic_output_prefix}.nep171.nft_mint_flat', partitions=${topic_output_partitions}, value_format='json')
  AS SELECT
    EXPLODE("data"->"_ids") AS "_id",
    EXPLODE("data"->"_ids") AS "partition_key",
    "data"->"owner_id" AS "owner_id",
    EXPLODE("data"->"token_ids") AS "token_id",
    EXPLODE("data"->"metadatas") AS "metadata",
    EXPLODE("data"->"metadata_extras") AS "metadata_extra",
    "emit_info"->"contract_account_id" AS "contract_account_id",
    "partition_key" as "old_partition_key"
  FROM
    "event_nft_mint_metadata"
  PARTITION BY "partition_key";

CREATE STREAM "nft_mint"
  WITH (kafka_topic='${topic_output_prefix}.nep171.nft_mint', partitions=${topic_output_partitions}, value_format='json')
  AS SELECT
  "_id", "owner_id", "token_id", "metadata", "metadata_extra", "contract_account_id", "partition_key"
  FROM
    "nft_mint_flat"
  PARTITION BY "partition_key";

CREATE STREAM "nft_transfer_flat"
  WITH (kafka_topic='${topic_output_prefix}.nep171.nft_transfer_flat', partitions=${topic_output_partitions}, value_format='json')
  AS SELECT
    EXPLODE("data"->"_ids") AS "_id",
    EXPLODE("data"->"_ids") AS "partition_key",
    "data"->"new_owner_id" AS "owner_id",
    EXPLODE("data"->"token_ids") AS "token_id",
    EXPLODE("data"->"metadatas") AS "metadata",
    EXPLODE("data"->"metadata_extras") AS "metadata_extra",
    "emit_info"->"contract_account_id" AS "contract_account_id",
    "partition_key" as "old_partition_key"
  FROM
    "event_nft_transfer_metadata"
  PARTITION BY "partition_key";

CREATE STREAM "nft_transfer"
  WITH (kafka_topic='${topic_output_prefix}.nep171.nft_transfer', partitions=${topic_output_partitions}, value_format='json')
  AS SELECT
  "_id", "owner_id", "token_id", "metadata", "metadata_extra", "contract_account_id", "partition_key"
  FROM
    "nft_transfer_flat"
  PARTITION BY "partition_key";

CREATE STREAM "nfts" ("partition_key" STRING KEY, "_id" STRING, "owner_id" STRING, "token_id" STRING, "metadata" TOKEN_METADATA, "metadata_extra" MAP<STRING,STRING>, "contract_account_id" STRING)
  WITH (kafka_topic='${topic_output_prefix}.nep171.nfts', partitions=${topic_output_partitions}, value_format='avro');

INSERT INTO "nfts" SELECT * FROM "nft_mint";
INSERT INTO "nfts" SELECT * FROM "nft_transfer";
